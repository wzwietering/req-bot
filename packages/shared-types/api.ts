/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/auth/login/{provider}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Oauth Login
         * @description Initiate OAuth login with specified provider.
         */
        get: operations["oauth_login_api_v1_auth_login__provider__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/callback/{provider}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Oauth Callback
         * @description Handle OAuth callback and create user session.
         */
        get: operations["oauth_callback_api_v1_auth_callback__provider__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User Profile
         * @description Get current authenticated user profile.
         */
        get: operations["get_current_user_profile_api_v1_auth_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh Token
         * @description Refresh access token using refresh token from cookie with token rotation.
         */
        post: operations["refresh_token_api_v1_auth_refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout
         * @description Logout user and revoke refresh token.
         */
        post: operations["logout_api_v1_auth_logout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/invalidate-sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Invalidate User Sessions
         * @description Invalidate all sessions for the current user.
         *
         *     Useful for security events like password changes, suspicious activity detection,
         *     or when user wants to log out from all devices.
         */
        post: operations["invalidate_user_sessions_api_v1_auth_invalidate_sessions_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Auth Status
         * @description Get authentication system status and provider configurations.
         */
        get: operations["auth_status_api_v1_auth_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Sessions
         * @description List user's requirements gathering sessions.
         */
        get: operations["list_sessions_api_v1_sessions_get"];
        put?: never;
        /**
         * Create Session
         * @description Create a new requirements gathering session with LLM-generated questions.
         */
        post: operations["create_session_api_v1_sessions_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/{session_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Session
         * @description Get detailed information about a specific session.
         */
        get: operations["get_session_api_v1_sessions__session_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Session
         * @description Delete a specific session.
         */
        delete: operations["delete_session_api_v1_sessions__session_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/{session_id}/qa": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Session Qa
         * @description Get all questions and answers for a specific session.
         */
        get: operations["get_session_qa_api_v1_sessions__session_id__qa_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/{session_id}/continue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Continue Session
         * @description Continue or resume a session to get the next question.
         */
        post: operations["continue_session_api_v1_sessions__session_id__continue_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/{session_id}/answers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Answers
         * @description List all answers for a session.
         */
        get: operations["list_answers_api_v1_sessions__session_id__answers_get"];
        put?: never;
        /**
         * Submit Answer
         * @description Submit an answer using intelligent pipeline logic.
         */
        post: operations["submit_answer_api_v1_sessions__session_id__answers_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/{session_id}/questions/current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current Question Endpoint
         * @description Get the current question for a session.
         */
        get: operations["get_current_question_endpoint_api_v1_sessions__session_id__questions_current_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/{session_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Session Status
         * @description Get the current status and progress of a session.
         */
        get: operations["get_session_status_api_v1_sessions__session_id__status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/{session_id}/retry-requirements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Retry Requirements Generation
         * @description Retry requirements generation for a failed session.
         *
         *     Rate limit: 5 attempts per 10 minutes per session to prevent abuse.
         */
        post: operations["retry_requirements_generation_api_v1_sessions__session_id__retry_requirements_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/{session_id}/questions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Questions
         * @description List all questions for a session.
         */
        get: operations["list_questions_api_v1_sessions__session_id__questions_get"];
        put?: never;
        /**
         * Create Question
         * @description Create a new question for a session.
         */
        post: operations["create_question_api_v1_sessions__session_id__questions_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/{session_id}/questions/{question_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Question
         * @description Get details of a specific question with its answer if available.
         */
        get: operations["get_question_api_v1_sessions__session_id__questions__question_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Question
         * @description Delete a question and its associated answer.
         */
        delete: operations["delete_question_api_v1_sessions__session_id__questions__question_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/{session_id}/answers/{question_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Answer
         * @description Get details of a specific answer by question ID.
         */
        get: operations["get_answer_api_v1_sessions__session_id__answers__question_id__get"];
        /**
         * Update Answer
         * @description Update an existing answer.
         */
        put: operations["update_answer_api_v1_sessions__session_id__answers__question_id__put"];
        post?: never;
        /**
         * Delete Answer
         * @description Delete an answer, marking the question as unanswered.
         */
        delete: operations["delete_answer_api_v1_sessions__session_id__answers__question_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/usage/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get My Usage
         * @description Get current user's usage statistics.
         */
        get: operations["get_my_usage_api_v1_usage_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Root */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health Check */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Answer */
        Answer: {
            /** Question Id */
            question_id: string;
            /** Text */
            text: string;
            /**
             * Is Vague
             * @default false
             */
            is_vague: boolean;
            /**
             * Needs Followup
             * @default false
             */
            needs_followup: boolean;
        };
        /**
         * AnswerDetailResponse
         * @description Response containing answer details with associated question.
         */
        AnswerDetailResponse: {
            /** Session Id */
            session_id: string;
            answer: components["schemas"]["Answer"];
            question: components["schemas"]["Question"];
        };
        /**
         * AnswerListResponse
         * @description Response containing list of answers for a session.
         */
        AnswerListResponse: {
            /** Session Id */
            session_id: string;
            /** Answers */
            answers: components["schemas"]["Answer"][];
        };
        /** AnswerSubmissionResponse */
        AnswerSubmissionResponse: {
            /** Session Id */
            session_id: string;
            question: components["schemas"]["Question"];
            answer: components["schemas"]["Answer"];
            /** Conversation Complete */
            conversation_complete: boolean;
            conversation_state: components["schemas"]["ConversationState"];
            /**
             * Requirements Generated
             * @default false
             */
            requirements_generated: boolean;
        };
        /**
         * AnswerUpdateRequest
         * @description Request to update an answer.
         */
        AnswerUpdateRequest: {
            /**
             * Text
             * @description Answer text
             * @example The project must be completed within 6 months with a budget of $100,000
             */
            text: string;
        };
        /**
         * ConversationState
         * @description All possible conversation states in the interview pipeline.
         * @enum {string}
         */
        ConversationState: "initializing" | "generating_questions" | "waiting_for_input" | "processing_answer" | "generating_followups" | "assessing_completeness" | "generating_requirements" | "completed" | "failed";
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** Question */
        Question: {
            /** Id */
            id: string;
            /** Text */
            text: string;
            /**
             * Category
             * @enum {string}
             */
            category: "scope" | "users" | "constraints" | "nonfunctional" | "interfaces" | "data" | "risks" | "success";
            /**
             * Required
             * @default true
             */
            required: boolean;
        };
        /**
         * QuestionAnswerPair
         * @description A question paired with its answer (if answered).
         */
        QuestionAnswerPair: {
            question: components["schemas"]["Question"];
            answer: components["schemas"]["Answer"] | null;
        };
        /** QuestionAnswerRequest */
        QuestionAnswerRequest: {
            /**
             * Answer Text
             * @description Answer text for the current question
             * @example We need a web-based dashboard accessible from desktop and mobile devices
             */
            answer_text: string;
        };
        /**
         * QuestionCreateRequest
         * @description Request to create a new question.
         */
        QuestionCreateRequest: {
            /**
             * Text
             * @description Question text
             * @example What is the expected timeline for this project?
             */
            text: string;
            /**
             * Category
             * @example constraints
             * @enum {string}
             */
            category: "scope" | "users" | "constraints" | "nonfunctional" | "interfaces" | "data" | "risks" | "success";
            /**
             * Required
             * @default true
             * @example true
             */
            required: boolean;
        };
        /**
         * QuestionDetailResponse
         * @description Response containing question details with optional answer.
         */
        QuestionDetailResponse: {
            /** Session Id */
            session_id: string;
            question: components["schemas"]["Question"];
            answer: components["schemas"]["Answer"] | null;
        };
        /**
         * QuestionListResponse
         * @description Response containing list of questions for a session.
         */
        QuestionListResponse: {
            /** Session Id */
            session_id: string;
            /** Questions */
            questions: components["schemas"]["Question"][];
        };
        /** Requirement */
        Requirement: {
            /** Id */
            id: string;
            /** Title */
            title: string;
            /** Rationale */
            rationale?: string | null;
            /**
             * Priority
             * @default MUST
             * @enum {string}
             */
            priority: "MUST" | "SHOULD" | "COULD";
        };
        /**
         * RetryRequirementsResponse
         * @description Response from retry requirements generation endpoint.
         */
        RetryRequirementsResponse: {
            /** Message */
            message: string;
            /** Session Id */
            session_id: string;
            /** Requirements Count */
            requirements_count: number;
            conversation_state: components["schemas"]["ConversationState"];
        };
        /** SessionContinueResponse */
        SessionContinueResponse: {
            /** Session Id */
            session_id: string;
            next_question: components["schemas"]["Question"] | null;
            /** Conversation Complete */
            conversation_complete: boolean;
            conversation_state: components["schemas"]["ConversationState"];
        };
        /** SessionCreateRequest */
        SessionCreateRequest: {
            /**
             * Project
             * @description Project name for the requirements gathering session
             * @example E-commerce Mobile App
             */
            project: string;
        };
        /** SessionCreateResponse */
        SessionCreateResponse: {
            /** Id */
            id: string;
            /** Project */
            project: string;
            conversation_state: components["schemas"]["ConversationState"];
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /** SessionDetailResponse */
        SessionDetailResponse: {
            /** Id */
            id: string;
            /** Project */
            project: string;
            /** Questions */
            questions: components["schemas"]["Question"][];
            /** Answers */
            answers: components["schemas"]["Answer"][];
            /** Requirements */
            requirements: components["schemas"]["Requirement"][];
            /** Conversation Complete */
            conversation_complete: boolean;
            conversation_state: components["schemas"]["ConversationState"];
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** SessionListResponse */
        SessionListResponse: {
            /** Sessions */
            sessions: components["schemas"]["SessionSummary"][];
        };
        /** SessionProgress */
        SessionProgress: {
            /** Total Questions */
            total_questions: number;
            /** Answered Questions */
            answered_questions: number;
            /** Remaining Questions */
            remaining_questions: number;
            /** Completion Percentage */
            completion_percentage: number;
        };
        /**
         * SessionQAResponse
         * @description Response containing all questions and answers for a session.
         */
        SessionQAResponse: {
            /** Session Id */
            session_id: string;
            /** Project */
            project: string;
            /** Qa Pairs */
            qa_pairs: components["schemas"]["QuestionAnswerPair"][];
        };
        /** SessionStatusResponse */
        SessionStatusResponse: {
            /** Session Id */
            session_id: string;
            conversation_state: components["schemas"]["ConversationState"];
            /** Conversation Complete */
            conversation_complete: boolean;
            current_question: components["schemas"]["Question"] | null;
            progress: components["schemas"]["SessionProgress"];
        };
        /** SessionSummary */
        SessionSummary: {
            /** Id */
            id: string;
            /** Project */
            project: string;
            conversation_state: components["schemas"]["ConversationState"];
            /** Conversation Complete */
            conversation_complete: boolean;
            /** Questions Count */
            questions_count: number;
            /** Answers Count */
            answers_count: number;
            /** Requirements Count */
            requirements_count: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * UsageStatsResponse
         * @description Usage statistics response.
         */
        UsageStatsResponse: {
            /** Questions Generated */
            questions_generated: number;
            /** Answers Submitted */
            answers_submitted: number;
            /** Quota Limit */
            quota_limit: number;
            /** Quota Remaining */
            quota_remaining: number;
            /** Window Days */
            window_days: number;
        };
        /** UserResponse */
        UserResponse: {
            /** Id */
            id: string;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Provider */
            provider: string;
            /** Name */
            name?: string | null;
            /** Avatar Url */
            avatar_url?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    oauth_login_api_v1_auth_login__provider__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                provider: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    oauth_callback_api_v1_auth_callback__provider__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                provider: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_current_user_profile_api_v1_auth_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
        };
    };
    refresh_token_api_v1_auth_refresh_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    logout_api_v1_auth_logout_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    invalidate_user_sessions_api_v1_auth_invalidate_sessions_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    auth_status_api_v1_auth_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    list_sessions_api_v1_sessions_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionListResponse"];
                };
            };
        };
    };
    create_session_api_v1_sessions_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SessionCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionCreateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_session_api_v1_sessions__session_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionDetailResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_session_api_v1_sessions__session_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_session_qa_api_v1_sessions__session_id__qa_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionQAResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    continue_session_api_v1_sessions__session_id__continue_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionContinueResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_answers_api_v1_sessions__session_id__answers_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnswerListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    submit_answer_api_v1_sessions__session_id__answers_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuestionAnswerRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnswerSubmissionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_current_question_endpoint_api_v1_sessions__session_id__questions_current_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_session_status_api_v1_sessions__session_id__status_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionStatusResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    retry_requirements_generation_api_v1_sessions__session_id__retry_requirements_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RetryRequirementsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_questions_api_v1_sessions__session_id__questions_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuestionListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_question_api_v1_sessions__session_id__questions_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuestionCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuestionDetailResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_question_api_v1_sessions__session_id__questions__question_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                question_id: string;
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuestionDetailResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_question_api_v1_sessions__session_id__questions__question_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                question_id: string;
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_answer_api_v1_sessions__session_id__answers__question_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                question_id: string;
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnswerDetailResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_answer_api_v1_sessions__session_id__answers__question_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                question_id: string;
                session_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AnswerUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnswerDetailResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_answer_api_v1_sessions__session_id__answers__question_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                question_id: string;
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_my_usage_api_v1_usage_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsageStatsResponse"];
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
